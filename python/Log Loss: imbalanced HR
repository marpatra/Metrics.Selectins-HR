import numpy as np

# New dataset
data = [
    (0, 6), (1, 3), (1, 7), (0, 3), (0, 3), (0, 3), (1, 3), (0, 3), (1, 7), (1, 7),
    (0, 6), (0, 3), (1, 6), (0, 7), (0, 7), (0, 3), (1, 7), (0, 3), (0, 3), (0, 3),
    (0, 3), (0, 3), (1, 3), (1, 7), (1, 7), (0, 3), (0, 3), (0, 3), (0, 3), (1, 7),
    (0, 3), (1, 7), (1, 3), (0, 7), (0, 3), (0, 3), (1, 7), (1, 6), (1, 7), (0, 3),
    (1, 7), (0, 7), (0, 3), (0, 3), (1, 3), (1, 7), (0, 3), (1, 7), (0, 3), (0, 3),
    (0, 3), (0, 7), (1, 3), (0, 3), (1, 7), (1, 7), (1, 7), (1, 7), (0, 3), (0, 3),
    (1, 7), (0, 3), (1, 7), (0, 3), (1, 7), (1, 7), (1, 3), (0, 7), (1, 7), (1, 3),
    (0, 3), (1, 7), (1, 7), (1, 6), (1, 3), (0, 3), (1, 7), (0, 3), (0, 3), (1, 7),
    (0, 3), (0, 3), (0, 3), (1, 7), (0, 3), (0, 3), (0, 3), (0, 3), (0, 7), (1, 3),
    (1, 7), (1, 7), (0, 3), (0, 3), (1, 7), (0, 3), (1, 7), (0, 7), (1, 3), (1, 7),
    (0, 3), (0, 3), (0, 3), (0, 7), (0, 3), (0, 7), (1, 7), (1, 3), (1, 3), (1, 7),
    (1, 7), (1, 7), (0, 7), (0, 7), (1, 3), (0, 3), (0, 3), (0, 3), (0, 7), (0, 3),
    (0, 3), (1, 7), (0, 3), (1, 7), (0, 7), (1, 3), (0, 3), (1, 6), (1, 7), (0, 7),
    (1, 6), (0, 3), (0, 3), (1, 7), (1, 7), (0, 3), (0, 7), (1, 3), (0, 3), (0, 7),
    (1, 6), (1, 7), (1, 7), (0, 3), (1, 7), (1, 7), (1, 3), (0, 3), (1, 3), (0, 3),
    (0, 3), (0, 3), (1, 3), (0, 3), (0, 3), (0, 7), (0, 7), (0, 7), (1, 7), (1, 7),
    (1, 7), (0, 3), (1, 3), (0, 3), (1, 7), (0, 3), (1, 7), (1, 3), (0, 7), (0, 3),
    (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (1, 7), (1, 3), (0, 3), (0, 3),
    (0, 3), (1, 3), (1, 3), (0, 3), (1, 3), (1, 3), (0, 3), (0, 3), (1, 3), (1, 7),
    (1, 7), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (1, 3), (0, 3), (1, 3), (1, 7),
    (1, 3), (1, 7), (0, 3), (0, 6), (1, 7), (0, 7), (0, 3), (0, 3), (0, 3), (0, 3),
    (0, 3), (0, 3), (1, 7), (0, 3), (1, 3), (0, 3), (0, 3), (1, 3), (1, 6), (1, 6),
    (1, 6), (1, 7), (0, 3), (1, 7), (0, 6), (1, 7), (0, 3), (1, 3), (0, 7), (0, 3),
    (0, 3), (1, 3), (0, 3), (1, 7), (0, 3), (1, 7), (0, 3), (1, 7), (1, 6), (1, 6),
    (0, 7), (0, 7), (0, 3), (1, 7), (0, 3), (1, 6), (1, 7), (1, 3), (0, 3), (1, 6),
    (1, 7), (1, 7), (1, 7), (1, 7), (1, 3), (0, 3)
]

# Preprocess the dataset
X = np.array([x[1] for x in data]).reshape(-1, 1)
y = np.array([x[0] for x in data])

# Logistic Regression class
class LogisticRegression:
    def __init__(self):
        self.b0 = 0
        self.b1 = 0
        self.sigmoid = np.array([])
        self.loss = np.array([])
        self.n = 0

    def fit(self, X, y):
        X_mean = np.mean(X)
        y_mean = np.mean(y)
        self.n = len(X)
        upward_function = 0
        downward_function = 0
        for i in range(self.n):
            upward_function += (X[i] - X_mean) * (y[i] - y_mean)
            downward_function += (X[i] - X_mean) ** 2
        self.b1 = upward_function / downward_function
        self.b0 = y_mean - (self.b1 * X_mean)
        return self.b0, self.b1

    def predict(self, X):
        self.sigmoid = 1 / (1 + np.exp(-(self.b0 + self.b1 * X)))
        return self.sigmoid

    def log_loss(self, y_true):
        epsilon = 1e-15
        self.sigmoid = np.clip(self.sigmoid, epsilon, 1 - epsilon)
        log_loss = -np.mean(y_true * np.log(self.sigmoid) + (1 - y_true) * np.log(1 - self.sigmoid))
        return log_loss

# Instantiate and use the logistic regression model
model = LogisticRegression()
print("Coefficients (b0, b1):", model.fit(X, y))
print("Predicted probabilities:", model.predict(X).flatten())
print("Log Loss:", model.log_loss(y))
